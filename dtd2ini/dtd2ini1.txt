
        dtd2ini:  Convert DTDs to Content-Model .ini Files

dtd2ini reads XML DTDs and generates .ini files that can be used
by other programs to work with the content models described in the
DTDs.  The default settings are intended for use in conjunction with 
Mif2Go, but many more options are provided which are not required
for Mif2Go so that dtd2ini is usable for many more purposes.

dtd2ini is based on the validating XML parser RXP.  We wish to thank
Richard Tobin, the author of RXP, for creating that parser, and for 
his kind advice during development of dtd2ini.

RXP is open source, licensed under the GPL v.2, and therefore dtd2ini
is also open source under the same license.  Both the current Windows
executable and the full C source are available on Omni Systems' web
site and are freely downloadable without any obligation from:
  http://www.omsys.com/dcl/download.htm

dtd2ini is run from the command line within the directory in which
the ouitput is wanted.  It reqires two arguments, with an optional
third one:

  dtd2ini source.dtd output.ini dtd2ini.ini

The source.dtd can include a relative or absolute path to the DTD
to be read.  It can also be a URL, if the system on which dtd2ini
is being run allows connection to the Internet.

The output.ini contains the content model generated by dtd2ini.
If the file already exists, it is overwritten without a warning.

If the last argument is omitted, it defaults to dtd2ini.ini; if
the program has been renamed, it also checks programname.ini.
In any case, this .ini file controls how the output is produced,
and must be present.  The rest of this file consists of an 
annotated description of the controlling .ini file.

=====================================================================
; dtd2ini.ini is the initialization file for the DTD to ini converter
; This version is for dtd2ini.exe version 0.1e (beta).
; Licensed under the General Public License (GPL), Version 2.

[Options]
; OutputType = XML (default, for general XML use) or DITA (excludes
; TopicBody element from [TopicParents], makes other adjustments)
OutputType=XML
; AlphaSort = Yes (default, sort element names) or No (leave in
; parent/child order found during traversal of DTD tree from root)
AlphaSort=Yes

; TopicParents = Yes (default, produce [TopicParents] section) or No
TopicParents=Yes
; TopicLevels = Yes (default, produce [TopicLevels] section) or No
TopicLevels=Yes
; TopicFirst = Yes (default, produce [TopicFirst] section) or No
TopicFirst=Yes
; TopicChildren = No (default) or Yes (produce [TopicChildren] section
TopicChildren=No
;
; ElementTypes = Yes (default, produce [ElementTypes] section) or No
ElementTypes=Yes
; ShowVotes = No (default) or Yes (show the number of inline and block 
; votes for each element in ElementType)
ShowVotes=No
; BlockWeighting = Multiplier for block votes in determining ElementType
BlockWeighting=10
;
; ElementSets = Yes (default, produce [ElementSets] section) or No
ElementSets=Yes
; MinimumPartSize = Minimum number of matching elements for a part
MinimumPartSize=4
; MaximumPartSize = Maximum number of elements for a single part
MaximumPartSize=20


[Topic]
; TopicRoot = root element to use when generating content model.
; Note that the same DTD, with different roots specified, can 
; produce very different content models.  This setting is required.
TopicRoot=book
;
; Settings for specially-processed topic elements, used for DITA
TopicStart=title
TopicBody=conbody
;
; Settings for PUBLIC and SYSTEM identifiers, for DITA and DocBook
PrologDType="-//OASIS//DTD DITA Concept//EN"
PrologDTD="http://docs.oasis-open.org/dita/v1.1/CD01/dtd/concept.dtd"


[ElementTypes]
; Overrides for setting in DocBook*.ini or DITA*.ini, to correct
; for failures of the heueristic block/inline voting method, and
; to specify preformatted elements.  The recognized terms are Block,
; Inline, and Preform.  The generated .ini may also contain Text,
; but that is set exclusively from the DTD and cannot be overridden.

para=Block Text
phrase=Inline Text

; DITA preforms
codeblock=Preform
lines=Preform
msgblock=Preform
pre=Preform
screen=Preform

; DocBook preforms
literallayout=Preform
programlisting=Preform
screen=Preform
synopsis=Preform


[AddedSections]
; Add sections named to the end of the output ini, such as
; DITA table sections, needed by Mif2Go but not produced 
; by dtd2ini since the data required is not in the DTD.
1=TopicTables
2=SimpleTable
3=PropertyTable

; The added sections themselves go here

[End]
; end of dtd2ini.ini

=====================================================================

Copyright (c) 2007 by Jeremy H. Griffith.  All rights reserved.
Licensed under the General Public License, Version 2.0.



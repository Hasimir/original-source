<doc id="ud_base">
<title>The uDoc Document Format</title>

<p><term idref="udoc"/> is a new document format based on <idx id="idx-mxml">MicroXML:basis for uDoc format</idx><term idref="mxml">MicroXML</term>.  It is topic-oriented like <abbr idref="dita"/>, but has a critical difference in design.  Where <abbr idref="dita"/> requires you to fit your data into one of several standard formats, <var idref="ud"/> helps you create a format that exactly fits your own use case, but will still work with a standard toolset and provide good interchangeabiliy with other users.

Note that while uDoc does not *impose* a <idx>schema, creating your own for uDoc</idx>schema on you, you are perfectly free to create your own schemas (possibly using <idx>Relax NG, for creating schemas</idx>Relax NG) whenever you find they are useful for your own purposes.  Nothing in uDoc prevents this or even discourages it.  As Uche Ogbuji said in <xref src="http://lists.xml.org/archives/xml-dev/201308/msg00198.html">a recent post</xref> on [xml-dev]:</p>

<quote>When a need for an XML schema comes about, it will show itself apparent in the context of practice, often long practice, and ideally it will be minimal and as flexible as possible given the need.  That's the point with regard to markup, folks.</quote>

<p>The primary designer of the <idx id="idx-ud"><var idref="ud"/></idx>uDoc format is Jeremy H. Griffith, with the invaluable support of the rest of the <abbr idref="omni"/> team, especially the Publications Manager, Carolyn Stallard.  As the CTO of <abbr idref="omni"/>, he has had extensive experience with technical writing issues (over 50 years in the field), as well as with computer language design.  When he heard of the <idx><term idref="mxml"/></idx>MicroXML initiative, he became involved right away.  He wanted to see what James Clark and John Cowan, two people for whom he has the highest respect, would come up with as a simplified <term idref="xml"/>.  He was very pleased with the result, and was inspired to use it as the basis for <var idref="ud"/>.

At <abbr idref="omni"/>, he led the work that created <idx><term idref="m2g"/></idx><term idref="m2g"/>, a powerful <var idref="fm"/> converter that produces numerous formats (HTML, RTF, XML, and many kinds of online help), and its follow-on <term idref="d2g"/>, with the same outputs from <abbr idref="dita"/> source.  <tm idref="m2g"/> is known as the top-ranked converter for going from <idx><var idref="fm"/>, converting:to <abbr idref="dita"/></idx><var idref="fm"/> to DITA, a path being taken by many companies now.  Designing both ends of the process, conversion to and from DITA, has given him a very deep understanding of what is valuable about DITA... and what isn't.  He also designed the <idx>FrameMaker, converting:to DocBook</idx><term idref="dbk"/> output converter in <tm idref="m2g"/>, providing another view of how technical documents can be structured.

It slowly became clear that while <abbr idref="dita"/> had many benefits, it was being strangled by its own <idx><term idref="dita"/>, complexity of</idx>*overcomplexity*.  This was the natural result of starting with a fixed content model, then adding to it as required to handle use cases never imagined at the beginning.  Since DITA is based on constraints, limiting what can go into an element and what attributes it can have, new elements have to be _less_ capable than the ones they are based on, which is a constant source of gotchas.  This design is not helpful for writers trying to get a job done.

<abbr idref="dita"/> is also hampered by *inadequate tools*, which is ironic as better tool availability is claimed to be one of its major advantages.  The <idx><term idref="ditaot"/></idx><term idref="ditaot"/>, a collection of <idx>XSLT</idx><term idref="xslt"/> scripts, requires customization by an XSLT programmer for any use case that isn't as trivial as the sample files... and tech writers with _no_ programming experience are expected to do this because, after all, XSLT is just a "script".  A couple of weeks reading the <xref src="http://groups.yahoo.com/group/dita-users/">Yahoo [dita-users] list</xref> will convince anyone this is a non-trivial task; the list is high volume, and discusses little else.  Unfortunately, this also gives users the idea that the <abbr idref="ditaot"/> is the only approved way to go, and that becomes a self-fulfilling prophecy, as vendors won't invest major resources in tool development (as Omni Systems did for <tm idref="d2g"/>) if people won't buy the tool because the <abbr idref="ditaot"/> is both "official" and "free".

So with uDoc<idx see="idx-ud">format, uDoc</idx>, we took the opposite approach.  No content model (MicroXML doesn't use DTDs anyway), and a set of elements as small as possible, so they would remain manageable.  uDoc also provides a simple copy/paste method of adding more elements if wanted, as opposed to the complex DTD authoring required for even a simple addition to DITA.  Support for uDoc's outputs is provided by <tm idref="u2g"/>, a very solid commercial-quality converter from Omni Systems, so XSLT scripting is never needed.  This makes uDoc a highly-usable format for producing technical and business documentation of all types. A detailed comparison chart of uDoc vs. DITA is at <xref src="ud_compare.mxd"/>.</p>

<relref subjects="basics comparison" />

</doc>

